name: Build Tauri App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        type: boolean
        default: false
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string
        default: ''

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            target: linux
            rust_targets: x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu
          - platform: macos-latest
            target: darwin
            rust_targets: x86_64-apple-darwin aarch64-apple-darwin
          - platform: windows-latest
            target: windows
            rust_targets: x86_64-pc-windows-msvc aarch64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.rust_targets }}
          components: rustfmt, clippy

      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tauriScript: pnpm tauri
          args: build --target ${{ matrix.target }} -- --profile release

      # Create tar.gz for Linux executable
      - name: Create Linux executable tarball
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd src-tauri/target/release
          APP_NAME=$(find . -type f -executable -not -path "*/\.*" -not -path "*/deps/*" -not -path "*/build/*" | grep -v "\.d$" | grep -v "\.rlib$" | grep -v "\.rmeta$" | head -1)
          if [ -n "$APP_NAME" ]; then
            APP_NAME=$(basename $APP_NAME)
            mkdir -p linux-package
            cp $APP_NAME linux-package/
            cd linux-package
            tar -czvf ../${APP_NAME}.tar.gz $APP_NAME
            cd ..
            echo "Created ${APP_NAME}.tar.gz"
          else
            echo "No executable found"
            exit 1
          fi

      # Handle Linux artifacts specifically
      - name: Upload Linux artifacts
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/*.tar.gz
          if-no-files-found: warn

  # Create GitHub Release if requested via manual trigger
  create-release:
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' && github.event.inputs.release_tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: Release ${{ github.event.inputs.release_tag }}
          draft: true
          files: |
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.tar.gz
            artifacts/**/*.dmg
            artifacts/**/*.app.tar.gz
            artifacts/**/*.exe
            artifacts/**/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Handle macOS artifacts
      - name: Upload macOS artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app.tar.gz
          if-no-files-found: warn

      # Handle Windows artifacts
      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: warn